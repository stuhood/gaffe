{ "namespace": "gaffe",
  "protocol": "GaffeProtocol", 
  "doc": "Defines the types used to persist graphs.", 
  "types": [
    {"name": "Value", "type": "record",
     "doc": "A untyped (for now) byte value, with nulls sorting last.",
     "fields": [
       {"name": "value", "type": ["bytes", "null"]}
    ]},
    {"name": "Vertex", "type": "record",
     "doc": "A  vertex.",
     "fields": [
       {"name": "name", "type": "Value"},
       {"name": "gen", "type": "long",
        "doc": "The generation number/file containing the vertex, or -1 for the current generation."},
       {"name": "block", "type": "long",
        "doc": "The block number containing the vertex within the generation, or -1 if unknown."}
    ]},
    {"name": "Edge", "type": "record",
     "doc": "An in or outbound edge from the given vertex.",
     "fields": [
       {"name": "label", "type": "Value",
        "doc": "Rather than a name, edges have a label, which makes the identity of an edge a triple of (src.name, label, dest.name)."},
       {"name": "vertex", "type": "Vertex"},
       {"name": "warmth", "type": "long",
        "doc": "Represents the relative number of times the edge has been traversed."}
    ]},
    {"name": "Path", "type": "record",
     "doc": "A vertex and list of edges defining a path.",
     "fields": [
       {"name": "vertex", "type": "Vertex"},
       {"name": "edges", "type": {"type": "array", "items": "Edge"}}
    ]},
    {"name": "Range", "type": "record",
     "namespace": "gaffe.io",
     "doc": "An ordered pair of Paths that share a prefix: 'end' is a replacement suffix for 'begin'. The range is inclusive on begin, exclusive on end. FIXME: Needs optimization.",
     "fields": [
       {"name": "begin", "type": "gaffe.Path"},
       {"name": "end", "type": "gaffe.Path"}
    ]},
    {"name": "Chunk", "type": "record",
     "namespace": "gaffe.io",
     "doc": "The largest unit in a gaffe data file. Chunks are always written as pairs, with a Range followed by an array of Edges. A 'range' Chunk describes the range of paths found in the following 'edge' chunk, and allows it to be skipped without deserialization.",
     "fields": [
       {"name": "value", "type": ["Range", {"type": "array", "items": "gaffe.Edge"}]}
    ]},
    {"name": "ViewMetadata", "type": "record",
     "namespace": "gaffe.io",
     "doc": "The metadata describing a View, and the paths it stores.",
     "fields": [
       {"name": "generation", "type": "long"},
       {"name": "id", "type": "long",
        "doc": "Unique within a generation, independent from other generations."},
       {"name": "depth", "type": "int",
        "doc": "The depth of the paths stored in this View."},
       {"name": "inverted", "type": "boolean",
        "doc": "True if the View records inbound paths, rather than outbound."},
       {"name": "partial", "type": "boolean",
        "doc": "False if the View contains all vertices/edges for the generation."}
    ]}
  ]
}
